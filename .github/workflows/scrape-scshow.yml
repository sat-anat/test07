name: Scrape SCSHOW Cards to CSV

on:
  workflow_dispatch:

concurrency:
  group: scrape-scshow-${{ github.ref }}
  cancel-in-progress: false

env:
  CACHE_VERSION: v1
  # npm / Playwright のキャッシュ先
  NPM_CACHE_DIR: ~/.npm
  PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
  PW_CACHE_DIRS: |
    ~/.cache/ms-playwright
    ~/.cache/playwright
  # Node のキャッシュキーはメジャーで安定化（20系を使い続ける想定）
  NODE_CACHE_KEY: 20

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      # キャッシュ対象ディレクトリを事前作成（未作成エラー回避）
      - name: Prepare cache directories
        shell: bash
        run: |
          set -eux
          mkdir -p "${NPM_CACHE_DIR}"
          mkdir -p ~/.cache/ms-playwright ~/.cache/playwright

      - name: Setup Node
        id: node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        # 内蔵cacheは使わず、明示的な actions/cache を利用

      # lockfile の有無を検出
      - name: Detect lockfile
        id: detect
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then
            echo "lock_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "lock_exists=false" >> "$GITHUB_OUTPUT"
          fi

      # npm キャッシュ復元（lock あり）
      - name: Cache npm (by package-lock.json)
        if: steps.detect.outputs.lock_exists == 'true'
        id: cache_npm_lock
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.NPM_CACHE_DIR }}
          key: npm-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-lock-${{ hashFiles('package-lock.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            npm-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-lock-
            npm-${{ runner.os }}-

      # npm キャッシュ復元（lock なし → package.json ベース）
      - name: Cache npm (by package.json)
        if: steps.detect.outputs.lock_exists != 'true'
        id: cache_npm_pkg
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.NPM_CACHE_DIR }}
          key: npm-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-pkg-${{ hashFiles('package.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            npm-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-pkg-
            npm-${{ runner.os }}-

      # Playwright ブラウザ資材キャッシュ復元
      - name: Cache Playwright browsers (restore)
        id: cache_pw
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.PW_CACHE_DIRS }}
          key: pw-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-${{ hashFiles('package-lock.json', 'package.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            pw-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-
            pw-${{ runner.os }}-

      # 事前デバッグ
      - name: Debug | System & Cache status (pre-install)
        shell: bash
        run: |
          echo "::group::Tool versions"
          which node && node -v
          which npm && npm -v
          which npx && npx --version || true
          echo "::endgroup::"

          echo "::group::Cache hits"
          echo "npm cache (lock) hit: ${{ steps.cache_npm_lock.outputs.cache-hit }}"
          echo "npm cache (pkg)  hit: ${{ steps.cache_npm_pkg.outputs.cache-hit }}"
          echo "playwright cache  hit: ${{ steps.cache_pw.outputs.cache-hit }}"
          echo "::endgroup::"

      # 依存インストール（lock 有無で ci/install 切替）
      - name: Install deps (npm ci/install with detailed logs)
        env:
          npm_config_loglevel: silly
          NODE_OPTIONS: "--trace-deprecation"
        shell: bash
        run: |
          set -euxo pipefail
          npm config set cache "$NPM_CACHE_DIR" --global
          npm config set prefer-offline true
          if [ "${{ steps.detect.outputs.lock_exists }}" = "true" ]; then
            npm ci --prefer-offline --no-audit --fund=false --verbose
          else
            npm install --prefer-offline --no-audit --fund=false --verbose
          fi

      # ★ ここで「早期保存」：後段が失敗しても npm キャッシュを残す
      - name: Save npm cache (lock)
        if: steps.detect.outputs.lock_exists == 'true' && steps.cache_npm_lock.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.NPM_CACHE_DIR }}
          key: npm-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-lock-${{ hashFiles('package-lock.json') }}-${{ env.CACHE_VERSION }}

      - name: Save npm cache (pkg)
        if: steps.detect.outputs.lock_exists != 'true' && steps.cache_npm_pkg.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.NPM_CACHE_DIR }}
          key: npm-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-pkg-${{ hashFiles('package.json') }}-${{ env.CACHE_VERSION }}

      # Playwright ブラウザ＋システム依存を CLI で導入
      - name: Install Playwright browsers & system deps (CLI)
        shell: bash
        run: |
          set -euxo pipefail
          PV="$(node -e "try{process.stdout.write(require('@playwright/test/package.json').version)}catch(e){process.stdout.write('')}" || true)"
          if [ -n "$PV" ] && dpkg --compare-versions "$PV" ge "1.51.1"; then
            npx playwright install --with-deps
          else
            npx -y @playwright/test@1.51.1 playwright install --with-deps
          fi

      # ★ Playwright キャッシュも早期保存（後段失敗に備える）
      - name: Save Playwright browsers cache
        if: steps.cache_pw.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.PW_CACHE_DIRS }}
          key: pw-${{ runner.os }}-node${{ env.NODE_CACHE_KEY }}-${{ hashFiles('package-lock.json', 'package.json') }}-${{ env.CACHE_VERSION }}

      # 以降：スクレイパー実行（前回の詳細デバッグ＆リトライ＆診断はそのまま）
      - name: Create failure diagnostic helper (ESM)
        shell: bash
        run: |
          set -eux
          mkdir -p tools artifacts
          cat > tools/pw-dump-on-fail.mjs <<'EOF'
          import fs from 'node:fs';
          import path from 'node:path';
          import { chromium } from 'playwright';
          const url = process.env.DUMP_URL || 'about:blank';
          const outDir = process.env.DUMP_DIR || 'artifacts';
          await fs.promises.mkdir(outDir, { recursive: true });
          const browser = await chromium.launch({ headless: true });
          const page = await browser.newPage();
          try {
            try { await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 }); } catch {}
            await page.waitForTimeout(2000);
            try { await page.screenshot({ path: path.join(outDir, 'fail-screenshot.png'), fullPage: true }); } catch {}
            const html = await page.content();
            await fs.promises.writeFile(path.join(outDir, 'fail-page.html'), html);
          } catch (e) {
            await fs.promises.writeFile(path.join(outDir, 'dump-error.txt'), String(e?.stack || e));
          } finally {
            await browser.close();
          }
          EOF

      - name: Run scraper (up to 3 attempts)
        shell: bash
        env:
          DEBUG: pw:api
          DUMP_URL: "https://asmape0104.github.io/scshow-calculator/"
          DUMP_DIR: "artifacts"
        run: |
          set -euxo pipefail
          attempt=1
          max=3
          until [ $attempt -gt $max ]; do
            echo "::group::Attempt $attempt / $max"
            if npm run scrape; then
              echo "Success on attempt $attempt"
              echo "::endgroup::"
              break
            fi
            echo "Attempt $attempt failed. Waiting and retrying..."
            echo "::endgroup::"
            attempt=$((attempt+1))
            sleep 7
          done
          if [ $attempt -gt $max ]; then
            echo "All attempts failed. Capturing diagnostics..."
            node tools/pw-dump-on-fail.mjs || true
            exit 1
          fi

      - name: Verify output
        shell: bash
        run: |
          set -euo pipefail
          test -f cards.csv
          wc -l cards.csv || true
          head -n 20 cards.csv || true

      - name: Upload npm logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-logs
          path: ~/.npm/_logs/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload diagnostics (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics
          path: |
            artifacts/**
            tools/pw-dump-on-fail.mjs
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: scshow-cards-csv
          path: cards.csv
          if-no-files-found: error
