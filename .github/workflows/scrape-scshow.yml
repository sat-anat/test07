name: Scrape SCSHOW Cards to CSV

on:
  workflow_dispatch:

concurrency:
  group: scrape-scshow-${{ github.ref }}
  cancel-in-progress: false

env:
  CACHE_VERSION: v1
  NPM_CACHE_DIR: ~/.npm

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      # --- キャッシュ対象ディレクトリを先に作成（未作成エラー回避） ---
      - name: Prepare cache directories
        shell: bash
        run: |
          set -eux
          mkdir -p "${NPM_CACHE_DIR}"
          mkdir -p ~/.cache/ms-playwright ~/.cache/playwright
          echo "Prepared cache dirs."

      - name: Setup Node
        id: node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        # 内蔵cacheは使わず、下の actions/cache に統一

      # --- npm ダウンロードキャッシュ ---
      - name: Cache npm download dir
        id: cache_npm
        uses: actions/cache@v4
        with:
          path: ${{ env.NPM_CACHE_DIR }}
          key: npm-${{ runner.os }}-node${{ steps.node.outputs.node-version }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            npm-${{ runner.os }}-node${{ steps.node.outputs.node-version }}-
            npm-${{ runner.os }}-

      # --- Playwright ブラウザ資材キャッシュ ---
      - name: Cache Playwright browsers
        id: cache_pw
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: pw-${{ runner.os }}-node${{ steps.node.outputs.node-version }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            pw-${{ runner.os }}-node${{ steps.node.outputs.node-version }}-
            pw-${{ runner.os }}-

      # --- 事前デバッグ情報 ---
      - name: Debug | System & Cache status (pre-install)
        shell: bash
        run: |
          echo "::group::Runner/Tool versions"
          uname -a || true
          which node && node -v
          which npm && npm -v
          which npx && npx --version || true
          echo "::endgroup::"

          echo "::group::Disk / Memory"
          df -h
          free -h || true
          echo "::endgroup::"

          echo "::group::Cache hits"
          echo "npm cache hit: ${{ steps.cache_npm.outputs['cache-hit'] }}"
          echo "playwright cache hit: ${{ steps.cache_pw.outputs['cache-hit'] }}"
          echo "::endgroup::"

          echo "::group::Existing cache directories (before install)"
          echo "NPM_CACHE_DIR=${NPM_CACHE_DIR}"
          [ -d "${NPM_CACHE_DIR}" ] && du -sh "${NPM_CACHE_DIR}" || echo "NPM cache dir not found"
          for d in ~/.cache/ms-playwright ~/.cache/playwright; do
            if [ -d "$d" ]; then du -sh "$d"; else echo "$d not found"; fi
          done
          echo "::endgroup::"

      # --- 依存インストール（ダウンロードはキャッシュ再利用） ---
      - name: Install deps (npm ci)
        env:
          npm_config_loglevel: silly
          NODE_OPTIONS: "--trace-deprecation"
        shell: bash
        run: |
          set -euxo pipefail
          echo "::group::npm config"
          npm config set cache "$NPM_CACHE_DIR" --global
          npm config set prefer-offline true
          npm config get cache
          npm config ls -l
          echo "::endgroup::"

          echo "::group::npm ci"
          npm ci --prefer-offline --no-audit --fund=false --verbose
          echo "::endgroup::"

      # --- Playwright ブラウザ＋システム依存を CLI で導入（Ubuntu 24.04 対応） ---
      #  - プロジェクトに入っている @playwright/test のバージョンを確認
      #  - 1.51.1 以上ならそのまま `npx playwright install --with-deps`
      #  - 古い場合は CLI だけ 1.51.1 を一時使用してインストール（依存名の変更に対応）
      - name: Install Playwright browsers & system deps (CLI)
        shell: bash
        run: |
          set -euxo pipefail
          echo "::group::Detect Playwright version"
          PV="$(node -p \"(() => { try { return require('@playwright/test/package.json').version } catch(e) { return '' } })()\")"
          echo "Detected @playwright/test version: ${PV:-'(not installed)'}"
          echo "::endgroup::"

          echo "::group::Install browsers & system deps"
          if [ -n "$PV" ] && dpkg --compare-versions "$PV" ge "1.51.1"; then
            # プロジェクトのバージョンで実行
            npx playwright install --with-deps
          else
            # バージョン不足時は CLI を一時的に 1.51.1 で実行（Ubuntu 24.04 対応修正入り）
            npx -y @playwright/test@1.51.1 playwright install --with-deps
          fi
          echo "::endgroup::"

      # --- インストール後スナップショット ---
      - name: Debug | Post-install snapshot
        shell: bash
        run: |
          echo "::group::node_modules size & key files"
          du -sh node_modules || true
          test -f package-lock.json && sha256sum package-lock.json || true
          echo "::endgroup::"

          echo "::group::Cache directories (after install)"
          [ -d "${NPM_CACHE_DIR}" ] && du -sh "${NPM_CACHE_DIR}" || echo "NPM cache dir not found"
          for d in ~/.cache/ms-playwright ~/.cache/playwright; do
            if [ -d "$d" ]; then du -sh "$d"; else echo "$d not found"; fi
          done
          echo "::endgroup::"

          echo "::group::Top N largest npm cache entries"
          if [ -d "${NPM_CACHE_DIR}" ]; then
            (cd "${NPM_CACHE_DIR}" && du -ah . | sort -hr | head -n 50) || true
          fi
          echo "::endgroup::"

      - name: Run scraper
        shell: bash
        run: |
          set -euxo pipefail
          echo "::group::Package scripts"
          sed -n '1,200p' package.json || true
          echo "::endgroup::"

          echo "::group::Run npm script"
          npm run scrape
          echo "::endgroup::"

      - name: Verify output
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Output check"
          test -f cards.csv
          wc -l cards.csv || true
